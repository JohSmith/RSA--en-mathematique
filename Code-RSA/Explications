Le code RSA :

On va imaginer que nous avons deux espions. A est la source du message, B est le receveur du message.
Ils essaient de communiquer entre eux les codes de la bombe nucléaire.


B choisit deux nombres premiers (+100 chiffres chacun). x et y sont secrets.                       x = ... y = ...
Il va ensuite calculer le produit des deux pour obtenir n. n est public. On l'appelle "clé"        n = x * y
B continue en calculant O(n), le nombre de nombres qui sont entre ]1, n-1] et premiers
avec n. (càd s'ils n'ont pas de diviseurs communs à part 1)                                        O(n) = |{1,2,5,7, ... , n-1}| premiers avec n
                                                                                                   ou O(n) = (p-1)*(q-1)
B va déterminer une clé de cryptage e, un nombre premier à O(n) compris                            e premier à O(n)
entre [1; n-1]. Cette clé est publique. e sera utilisée par A pour crypter son message.            e ∈ {1,2,5,7, ... , n-1}
B va également créer une clé d pour décrypter le message que A va lui envoyer.
Il existe un d appartenant à [1; n-1] tel que ed divisé par O(n) donne un reste de 1.              ∃ d ∈ {1,2,5,7, ... , n-1}
Cette clé restera secrète.                                                                         tel que ed ≡ 1 (mod O(n))
A va transformer le message en un nombre à partir des valeurs ASCII de chaque caractère.
Ce nombre qui est à coder sera appelé m. Pour le crypter, il calcule le reste qu'on                m^e / n => q=... r = a
va appeler a de la division de m^e par n. Ce a correspond au message crypté.                       ou m^e ≡ a (mod n)
A envoie donc a à B.
B pour décrypter ce message devra calculer le reste b (qui vaudra m au final) de la                a^d / n => q=... r = b
division a^d par n                                                                                 a^d ≡ b (mod n)
Les espions ont donc réussi à se transmettre le message et à le coder/décoder.                     b = m


Ce qu'il faut savoir c'est que le code ASCII prend en compte l'intégralité du message à crypter et les crypte ensemble.
Un message d'une lettre sera plus sensible à la casse car il aura toujours la même valeur, alors qu'un message de deux lettres
pourra prendre plusieurs valeurs différentes.


Démonstration :

On va admettre que A essaie de dire à B "le président les cache".
En ASCII ça donne : 1081013212114130115105100101110116
B choisit deux nombres premiers secrets (d'une taille de 4 chiffres pour qu'on puisse le faire à calculette)
x = 17 y = 31
B va donc faire le produit de x et y pour obtenir n.
n = x*y = 17*31 = 527            n = 527
B continue en déterminant O(n). Il y en a 480.
O(n) = 480
B continue en déterminant le e dans l'intervalle {1,2,...,523}
B choisit 241.
e = 241

   480  | 241 |  R
   ________________
    1   | 0   | 480
    0   | 1   | 241
    1   | -1  | 239
    -1  | 2   | 2
    120 |-239 |  1                      
    
d est négatif, il faut qu'on en trouve un positif inclut dans l'intervalle [1, 526]
Donc on applique le théorème de Bezout comme ceci :

241x + 480y = 1
241 (-239) + 480 (120) = 1
241x + 480y = 241 (-239) + 480 (120)
241 ( x + 239 ) = 480 ( 120 - y )

241 | 480 ( 120 - y ) et 241 et 480 sont premiers entre eux donc d'après le théorème de Gauss 241 | ( 120 - y )

Donc 120 - y =  241k
         - y =  241k - 120
           y = -241k + 120
           
           241 ( x + 239 ) = 480 ( 120 - ( 241k + 120))
                 x + 239   = 480k
                 x         = 480k - 239
                 
            Avec k = 1      x =  480 - 239 =  241
                            y = -241 + 120 = -121
                            241 * 241 + 480 * ( -121 ) = 1
                            
                            
On vient donc de trouver un d positif, 241 donc d = 241

                            
            
            
                 

